@page "/account-form"
@page "/account-form/{AccountId:int}"
@using Task_ERP_Bar.Models
@using Task_ERP_Bar.Services
@using System.ComponentModel.DataAnnotations
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(IsEditMode ? "تعديل الحساب" : "إضافة حساب جديد") - ERP System</PageTitle>

<!-- Header Section -->
<header class="bg-primary text-white p-3 rounded shadow-sm">
    <div class="container-fluid">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-3">
                <button class="btn btn-outline-light btn-sm" @onclick="GoBack">
                    <i class="bi bi-arrow-left me-1"></i>
                    @(selectedLanguage == "Arabic" ? "رجوع" : "Back")
                </button>
                <h4 class="mb-0">
                    <i class="bi bi-bank me-2"></i>
                    @(IsEditMode 
                        ? (selectedLanguage == "Arabic" ? "تعديل الحساب" : "Edit Account")
                        : (selectedLanguage == "Arabic" ? "إضافة حساب جديد" : "Add New Account"))
                </h4>
            </div>
            
            <div class="d-flex align-items-center gap-3">
                <!-- Language Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-globe me-1"></i>
                        @selectedLanguage
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" @onclick="@(() => ChangeLanguage("English"))">English</a></li>
                        <li><a class="dropdown-item" href="#" @onclick="@(() => ChangeLanguage("Arabic"))">العربية</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Alert Messages -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show m-3" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty" aria-label="Close"></button>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show m-3" role="alert">
        <i class="bi bi-check-circle me-2"></i>
        @successMessage
        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty" aria-label="Close"></button>
    </div>
}

<!-- Main Form -->
<div class="container-fluid mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="bi bi-card-text me-2"></i>
                        @(selectedLanguage == "Arabic" ? "معلومات الحساب" : "Account Information")
                    </h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">@(selectedLanguage == "Arabic" ? "جاري التحميل..." : "Loading...")</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@accountModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row g-3">
                                <!-- Account Number -->
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="bi bi-hash me-1"></i>
                                        @(selectedLanguage == "Arabic" ? "رقم الحساب" : "Account Number")
                                        <span class="text-danger">*</span>
                                    </label>
                                    <InputText @bind-Value="accountModel.AccountNumber" 
                                             class="form-control"
                                             placeholder="@(selectedLanguage == "Arabic" ? "أدخل رقم الحساب" : "Enter account number")" />
                                    <ValidationMessage For="@(() => accountModel.AccountNumber)" class="text-danger small" />
                                </div>

                                <!-- Branch -->
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="bi bi-building me-1"></i>
                                        @(selectedLanguage == "Arabic" ? "الفرع" : "Branch")
                                        <span class="text-danger">*</span>
                                    </label>
                                    <InputSelect @bind-Value="accountModel.BranchID" 
                                               class="form-select">
                                        <option value="0">@(selectedLanguage == "Arabic" ? "اختر الفرع" : "Select Branch")</option>
                                        @if (branches != null)
                                        {
                                            @foreach (var branch in branches)
                                            {
                                                <option value="@branch.BranchID">
                                                    @(selectedLanguage == "Arabic" ? branch.BranchNameAr : branch.BranchNameEn)
                                                </option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => accountModel.BranchID)" class="text-danger small" />
                                </div>

                                <!-- Account Name Arabic -->
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="bi bi-type me-1"></i>
                                        @(selectedLanguage == "Arabic" ? "اسم الحساب (عربي)" : "Account Name (Arabic)")
                                        <span class="text-danger">*</span>
                                    </label>
                                    <InputText @bind-Value="accountModel.AccountNameAr" 
                                             class="form-control"
                                             placeholder="@(selectedLanguage == "Arabic" ? "أدخل اسم الحساب بالعربية" : "Enter account name in Arabic")" />
                                    <ValidationMessage For="@(() => accountModel.AccountNameAr)" class="text-danger small" />
                                </div>

                                <!-- Account Name English -->
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="bi bi-type me-1"></i>
                                        @(selectedLanguage == "Arabic" ? "اسم الحساب (إنجليزي)" : "Account Name (English)")
                                    </label>
                                    <InputText @bind-Value="accountModel.AccountNameEn" 
                                             class="form-control"
                                             placeholder="@(selectedLanguage == "Arabic" ? "أدخل اسم الحساب بالإنجليزية" : "Enter account name in English")" />
                                    <ValidationMessage For="@(() => accountModel.AccountNameEn)" class="text-danger small" />
                                </div>

                                <!-- Is Active -->
                                <div class="col-12">
                                    <div class="form-check">
                                        <InputCheckbox @bind-Value="accountModel.IsActive" class="form-check-input" id="isActive" />
                                        <label class="form-check-label fw-bold" for="isActive">
                                            <i class="bi bi-check-circle me-1"></i>
                                            @(selectedLanguage == "Arabic" ? "الحساب نشط" : "Account is Active")
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="d-flex justify-content-between align-items-center mt-4 pt-3 border-top">
                                <button type="button" class="btn btn-secondary" @onclick="GoBack">
                                    <i class="bi bi-arrow-left me-1"></i>
                                    @(selectedLanguage == "Arabic" ? "إلغاء" : "Cancel")
                                </button>
                                
                                <div class="d-flex gap-2">
                                    @if (IsEditMode)
                                    {
                                        <button type="button" class="btn btn-outline-danger" @onclick="DeleteAccount">
                                            <i class="bi bi-trash me-1"></i>
                                            @(selectedLanguage == "Arabic" ? "حذف" : "Delete")
                                        </button>
                                    }
                                    
                                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        <i class="bi bi-check-circle me-1"></i>
                                        @(IsEditMode 
                                            ? (selectedLanguage == "Arabic" ? "تحديث" : "Update")
                                            : (selectedLanguage == "Arabic" ? "حفظ" : "Save"))
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? AccountId { get; set; }

    private List<Branch> branches = new();
    private string selectedLanguage = "Arabic";
    private bool isLoading = false;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    private CreateAccountRequest accountModel = new();
    private bool IsEditMode => AccountId.HasValue && AccountId.Value > 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadBranches();
        
        if (IsEditMode)
        {
            await LoadAccount();
        }
    }

    private async Task LoadBranches()
    {
        try
        {
            branches = await ApiService.GetAllAsync<Branch>("Branch");
        }
        catch (Exception ex)
        {
            errorMessage = selectedLanguage == "Arabic"
                ? $"خطأ في تحميل الفروع: {ex.Message}"
                : $"Error loading branches: {ex.Message}";
        }
    }

    private async Task LoadAccount()
    {
        if (!AccountId.HasValue) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            var account = await ApiService.GetByIdAsync<Account>("Account", AccountId.Value);
            
            if (account != null)
            {
                accountModel = new CreateAccountRequest
                {
                    AccountNumber = account.AccountNumber,
                    AccountNameAr = account.AccountNameAr,
                    AccountNameEn = account.AccountNameEn ?? string.Empty,
                    BranchID = account.BranchID ?? 0,
                    IsActive = account.IsActive
                };
            }
            else
            {
                errorMessage = selectedLanguage == "Arabic"
                    ? "لم يتم العثور على الحساب"
                    : "Account not found";
                Navigation.NavigateTo("/accounts");
            }
        }
        catch (Exception ex)
        {
            errorMessage = selectedLanguage == "Arabic"
                ? $"خطأ في تحميل الحساب: {ex.Message}"
                : $"Error loading account: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            StateHasChanged();

            if (IsEditMode)
            {
                var updatedAccount = await ApiService.UpdateAsync("Account", AccountId.Value, accountModel);
                if (updatedAccount != null)
                {
                    successMessage = selectedLanguage == "Arabic"
                        ? "تم تحديث الحساب بنجاح"
                        : "Account updated successfully";
                    
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/accounts");
                }
            }
            else
            {
                var newAccount = await ApiService.CreateAsync("Account", accountModel);
                if (newAccount != null)
                {
                    successMessage = selectedLanguage == "Arabic"
                        ? "تم إنشاء الحساب بنجاح"
                        : "Account created successfully";
                    
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/accounts");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = selectedLanguage == "Arabic"
                ? $"خطأ في حفظ الحساب: {ex.Message}"
                : $"Error saving account: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task DeleteAccount()
    {
        if (!IsEditMode) return;

        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                selectedLanguage == "Arabic"
                    ? $"هل أنت متأكد من حذف الحساب '{accountModel.AccountNameAr}'؟"
                    : $"Are you sure you want to delete account '{accountModel.AccountNameEn ?? "Unknown"}'?");

            if (confirmed)
            {
                isSubmitting = true;
                StateHasChanged();

                var success = await ApiService.DeleteAsync("Account", AccountId.Value);
                
                if (success)
                {
                    successMessage = selectedLanguage == "Arabic"
                        ? "تم حذف الحساب بنجاح"
                        : "Account deleted successfully";
                    
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/accounts");
                }
                else
                {
                    errorMessage = selectedLanguage == "Arabic"
                        ? "فشل في حذف الحساب"
                        : "Failed to delete account";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = selectedLanguage == "Arabic"
                ? $"خطأ في حذف الحساب: {ex.Message}"
                : $"Error deleting account: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/accounts");
    }

    private void ChangeLanguage(string language)
    {
        selectedLanguage = language;
        StateHasChanged();
    }
} 