@page "/SubAccount"

<style>
    .nav-link {
        color: white !important;
    }
    
    .nav-link.active {
        color: #0d6efd !important;
        background-color: white !important;
        border-color: #dee2e6 #dee2e6 white !important;
    }
</style>

@using Task_ERP_Bar.Models
@using Task_ERP_Bar.Services
@inject NavigationManager Navigation
@inject IApiService ApiService

@code {
    private string selectedLanguage = "English";
    private string branchName = "Alexandria Branch";
    private string userName = "JohnDoe";
    private string activeTab = "Account";
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Form data
    private CreateSubAccountRequest subAccountModel = new();
    private List<Branch> branches = new();
    private List<SubAccount> subAccounts = new();
    private List<Account> accounts = new();
    private int? selectedAccountId = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = "خطأ: " + ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Load branches and sub accounts in parallel
            // var branchesTask = ApiService.GetBranchesAsync();
            // var subAccountsTask = ApiService.GetSubAccountsAsync();

            // await Task.WhenAll(branchesTask, subAccountsTask);

            // branches = await branchesTask;
            // subAccounts = await subAccountsTask;
        }
        catch (Exception ex)
        {
            errorMessage = $"خطأ في تحميل البيانات: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAccountsTab()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            // تحميل الحسابات والفروع معاً
            var accountsTask = ApiService.GetAllAsync<Account>("Account");
            var branchesTask = ApiService.GetAllAsync<Branch>("Branch");
            
            await Task.WhenAll(accountsTask, branchesTask);
            
            accounts = await accountsTask;
            branches = await branchesTask;
        }
        catch (Exception ex)
        {
            errorMessage = $"خطأ في تحميل الحسابات: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SelectTab(string tabName)
    {
        activeTab = tabName;
        if(tabName == "Account")
        {
            _ = LoadAccountsTab();
        }
    }

    private void ChangeLanguage(ChangeEventArgs e)
    {
        selectedLanguage = e.Value?.ToString() ?? "English";
        // Add localization logic here
    }

    private void Logout()
    {
        // Logout logic here
        Navigation.NavigateTo("/");
    }

    private async Task SaveSubAccount()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // تحقق من الحقول المطلوبة
            if (subAccountModel.BranchID == null || subAccountModel.BranchID == 0)
            {
                errorMessage = "يجب اختيار جميع الحقول المطلوبة (الفرع)";
                return;
            }

            // إنشاء كائن Account من البيانات المدخلة (فقط الحقول المطلوبة)
            var account = new Account
            {
                AccountNumber = subAccountModel.SubAccountNumber,
                AccountNameAr = subAccountModel.SubAccountNameAr,
                AccountNameEn = subAccountModel.SubAccountNameEn,
                BranchID = subAccountModel.BranchID ?? 0
            };

            // حفظ البيانات عبر الـAPI
            var result = await ApiService.CreateAsync<Account>("Account", account);
            
            if (result != null)
            {
                subAccountModel = new();
                selectedAccountId = null;
                await LoadData();
                successMessage = selectedLanguage == "Arabic" 
                    ? "تم حفظ الحساب بنجاح" 
                    : "Account saved successfully";
            }
            else
            {
                errorMessage = selectedLanguage == "Arabic"
                    ? "فشل في حفظ الحساب"
                    : "Failed to save account";
            }
        }
        catch (Exception ex)
        {
            errorMessage = selectedLanguage == "Arabic"
                ? $"خطأ في حفظ البيانات: {ex.Message}"
                : $"Error saving data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteSubAccount(int id)
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // var success = await ApiService.DeleteSubAccountAsync(id);
            // if (success)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"خطأ في حذف البيانات: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditSubAccount(SubAccount subAccount)
    {
        subAccountModel = new CreateSubAccountRequest
        {
            SubAccountNumber = subAccount.SubAccountNumber ?? string.Empty,
            SubAccountNameAr = subAccount.SubAccountNameAr ?? string.Empty,
            SubAccountNameEn = subAccount.SubAccountNameEn ?? string.Empty,
            BranchID = subAccount.BranchID,
            LevelID = subAccount.LevelID,
            ParentID = subAccount.ParentID,
            SubAccountTypeID = subAccount.SubAccountTypeID,
            IsActive = subAccount.IsActive
        };
    }

    private void FillAccountFields(Account acc)
    {
        subAccountModel.SubAccountNumber = acc.AccountNumber;
        subAccountModel.SubAccountNameAr = acc.AccountNameAr;
        subAccountModel.SubAccountNameEn = acc.AccountNameEn;
        subAccountModel.BranchID = acc.BranchID;
        selectedAccountId = acc.AccountID;
    }

    private async Task UpdateAccount()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            if (selectedAccountId == null)
            {
                errorMessage = "يجب اختيار حساب للتعديل";
                return;
            }
            if (subAccountModel.BranchID == null || subAccountModel.BranchID == 0)
            {
                errorMessage = "يجب اختيار جميع الحقول المطلوبة (الفرع)";
                return;
            }

            // جسم الطلب فقط الحقول المطلوبة
            var account = new Account
            {
                AccountNumber = subAccountModel.SubAccountNumber,
                AccountNameAr = subAccountModel.SubAccountNameAr,
                AccountNameEn = subAccountModel.SubAccountNameEn,
                BranchID = subAccountModel.BranchID ?? 0
            };

            // الطلب إلى /Account/{id}
            var result = await ApiService.UpdateAsync<Account>("Account", selectedAccountId.Value, account);
            if (result != null)
            {
                subAccountModel = new();
                selectedAccountId = null;
                await LoadData();
                successMessage = selectedLanguage == "Arabic"
                    ? "تم تعديل الحساب بنجاح"
                    : "Account updated successfully";
            }
            else
            {
                errorMessage = selectedLanguage == "Arabic"
                    ? "فشل في تعديل الحساب"
                    : "Failed to update account";
            }
        }
        catch (Exception ex)
        {
            errorMessage = selectedLanguage == "Arabic"
                ? $"خطأ في تعديل البيانات: {ex.Message}"
                : $"Error updating data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

<div class="text-white p-2 d-flex gap-2 align-items-center">

    <!-- الأزرار الأساسية -->
    <button class="btn btn-primary btn-sm w-auto text-warning">
        <NavLink class="text-warning text-decoration-none" href="JVAddFormComponent">
            New
        </NavLink>
    </button>
    <button class="btn btn-primary btn-sm w-auto text-warning">
        <NavLink class="text-warning text-decoration-none" href="JVUpdateFormComponent">
            Update
        </NavLink>
    </button>    <button class="btn btn-primary btn-sm w-auto text-warning">Delete</button>
    <button class="btn btn-primary btn-sm w-auto text-warning">Print</button>

    <!-- سهم لليسار -->
    <button class="btn btn btn-outline-info btn-primary btn-sm">
        <i class="fa-solid fa-caret-right fa-xl" style="color: #ffffff;"></i>
    </button>

    <!-- حقل البحث + أيقونة -->
    <div class="input-group" style="width: 200px;">
        <input type="text" class="form-control form-control-sm" placeholder="Search..." />
        <span class="input-group-text bg-primary">
            <i class="fa-solid fa-magnifying-glass fa-sm" style="color: #FFD43B;"></i>
        </span>
    </div>

    <!-- سهم لليمين -->
    <button class="btn btn btn-outline-info btn-primary btn-sm">
        <i class="fa-solid fa-caret-left fa-xl" style="color: #ffffff;"></i>
    </button>

    <!-- زر JV ياخد باقي العرض -->
    <button class="btn btn-primary btn-sm flex-grow-1 text-warning">JV</button>
    <button class="btn btn-primary btn-sm w-auto text-warning"><i class="fa-solid fa-x" style="color: #FFD43B;"></i></button>

</div>

<div class="row mt-4 px-3">
    

    <!-- الجانب الايسر - قائمة الحسابات الفرعية -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">قائمة الحسابات الفرعية</h5>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">جاري التحميل...</span>
                        </div>
                    </div>
                }
                else if (subAccounts.Count == 0)
                {
                    <div class="text-center text-muted">
                        <p>لا توجد حسابات فرعية</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>الرمز</th>
                                    <th>الاسم (عربي)</th>
                                    <th>الفرع</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var subAccount in subAccounts)
                                {
                                    <tr>
                                        <td>@subAccount.SubAccountNumber</td>
                                        <td>@subAccount.SubAccountNameAr</td>
                                        <td>@(subAccount.Branch?.BranchNameAr ?? "غير محدد")</td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button class="btn btn-outline-primary" 
                                                        @onclick="() => EditSubAccount(subAccount)" 
                                                        title="تعديل">
                                                    <i class="fa-solid fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" 
                                                        @onclick="() => DeleteSubAccount(subAccount.SubAccountID)" 
                                                        title="حذف">
                                                    <i class="fa-solid fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- الجانب الايمن -->
    <div class="col-md-6">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                @successMessage
            </div>
        }

        @if (isLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">جاري التحميل...</span>
                </div>
            </div>
        }

        <div class="mb-2 d-flex align-items-center">
            <label class="form-label me-2 mb-0" style="width: 220px;"><strong>Code</strong></label>
            <input type="text" class="form-control form-control-sm" style="width: 400px;" 
                   @bind="subAccountModel.SubAccountNumber" />
        </div>
        <div class="mb-2 d-flex align-items-center">
            <label class="form-label me-2 mb-0" style="width: 220px;"><strong>Name (Arabic)</strong></label>
            <input type="text" class="form-control form-control-sm" style="width: 400px;" 
                   @bind="subAccountModel.SubAccountNameAr" />
        </div>
        <div class="mb-2 d-flex align-items-center">
            <label class="form-label me-2 mb-0" style="width: 220px;"><strong>Name (English)</strong></label>
            <input type="text" class="form-control form-control-sm" style="width: 400px;" 
                   @bind="subAccountModel.SubAccountNameEn" />
        </div>
        <div class="mb-2 d-flex align-items-center">
            <label class="form-label me-2 mb-0" style="width: 220px;"><strong>Branch</strong></label>
            <select class="form-select form-select-sm" style="width: 400px;" @bind="subAccountModel.BranchID">
                <option value="0">Select Branch</option>
                @foreach (var branch in branches)
                {
                    <option value="@branch.BranchID">@branch.BranchNameAr</option>
                }
            </select>
        </div>

        <!-- زر الحفظ والتعديل -->
        <div class="mb-3 d-flex gap-2">
            <button class="btn btn-primary btn-sm" @onclick="SaveSubAccount">
                حفظ
            </button>
            <button class="btn btn-warning btn-sm" @onclick="UpdateAccount">
                تعديل
            </button>
            <button class="btn btn-secondary btn-sm" @onclick="() => { subAccountModel = new(); selectedAccountId = null; }">
                إعادة تعيين
            </button>
        </div>


        <!-- 🔽 التبويبات -->
        <ul class="nav nav-tabs mt-4 bg-primary">
            <li class="nav-item">  
                <a class="nav-link @(activeTab == "Account" ? "active" : "")" href="#" @onclick="@(() => SelectTab("Account"))" @onclick:preventDefault="true">Account</a>  
            </li>
            <li class="nav-item">  
                <a class="nav-link @(activeTab == "Details" ? "active" : "")" href="#" @onclick="@(() => SelectTab("Details"))" @onclick:preventDefault="true">Details</a>  
            </li>  
            <li class="nav-item">  
                <a class="nav-link @(activeTab == "Card" ? "active" : "")" href="#" @onclick="@(() => SelectTab("Card"))" @onclick:preventDefault="true">Card</a>  
            </li>  
            <li class="nav-item">  
                <a class="nav-link @(activeTab == "Contact" ? "active" : "")" href="#" @onclick="@(() => SelectTab("Contact"))" @onclick:preventDefault="true">Contact</a>  
            </li>  
            <li class="nav-item">  
                <a class="nav-link @(activeTab == "CompanyInfo" ? "active" : "")" href="#" @onclick="@(() => SelectTab("CompanyInfo"))" @onclick:preventDefault="true">Company Info</a>  
            </li>  
            <li class="nav-item">  
                <a class="nav-link @(activeTab == "Banks" ? "active" : "")" href="#" @onclick="@(() => SelectTab("Banks"))" @onclick:preventDefault="true">Banks</a>  
            </li>  
        </ul>

        <!-- 🔽 محتوى الجدول المتغير -->
        <div class="mt-3">
            @if(activeTab == "Account")
            {
                @if(isLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">جاري التحميل...</span>
                        </div>
                    </div>
                }
                else if(accounts.Count == 0)
                {
                    <div class="text-center text-muted">
                        <p>لا توجد حسابات</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>الكود</th>
                                    <th>الاسم (عربي)</th>
                                    <th>الاسم (إنجليزي)</th>
                                    <th>الفرع</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var acc in accounts)
                                {
                                    <tr @onclick="() => FillAccountFields(acc)" style="cursor:pointer;">
                                        <td>@acc.AccountNumber</td>
                                        <td>@acc.AccountNameAr</td>
                                        <td>@acc.AccountNameEn</td>
                                        <td>
                                            @{
                                                var branch = branches?.FirstOrDefault(b => b.BranchID == acc.BranchID);
                                            }
                                            @if (branch != null)
                                            {
                                                <span class="badge bg-secondary">
                                                    @(selectedLanguage == "Arabic" ? branch.BranchNameAr : branch.BranchNameEn)
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">@acc.BranchID</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
            else
            {
                <p>محتوى التبويب: @activeTab</p>
            }
        </div>
    </div>

    

</div> 